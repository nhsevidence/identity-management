////
/// @group helpers
////

// sass-lint:disable no-important

//## Mixins

/// Portrait media query
@mixin portrait {
  @media screen and (orientation: portrait) {
    @content;
  }
}

/// Landscape media query
@mixin landscape {
  @media screen and (orientation: landscape) {
    @content;
  }
}

/// Makes an element visually hidden, but still accessible to keyboards and assistive devices.
@mixin invisible {
  @include important(position, absolute);
  clip: rect(0, 0, 0, 0);
  height: 1px;
  overflow: hidden;
  width: 1px;
}

/// Reverses the CSS output created by the `invisible()` mixin.
@mixin invisible-off {
  @include important(static, absolute);
  clip: auto;
  height: auto;
  overflow: visible;
  width: auto;
}


//## Generic hide/show

/// Display none.
/// Note the use of `!important` for overriding styles.
.hide {
  display: none !important;
}

/// Displays an element as block by default.
/// Or use modifiers to display inline/inline-block:
///
/// Modifiers:
///   - `i`
///   - `ib`
.show {
  display: block !important;

  &--i {
    display: inline !important;
  }

  &--ib {
    display: inline-block !important;
  }
}

/// Visible
.visible {
  visibility: visible !important;
}

/// Visibility hidden
.invisible {
  visibility: hidden !important;
}


//## Orientation

/// Landscape and portrait display
.show-landscape,
.hide-portrait {
  display: block !important;

  @include landscape {
    display: block !important;
  }

  @include portrait {
    display: none !important;
  }
}

/// Landscape and portrait display
.hide-landscape,
.show-portrait {
  display: none !important;

  @include landscape {
    display: none !important;
  }

  @include portrait {
    display: block !important;
  }
}

//## Breakpoints show

// Outuput the following for each break point:
//  - .hide-from-*
//  - .show-from-*

$hide-selectors: ();
@each $brkpnt-key, $brkpnt-value in $mq-breakpoints {
  // Show from
  $hide-selectors: append($hide-selectors, '.show-#{ $brkpnt-key }', comma);
  $hide-selectors: append($hide-selectors, '.show--i-#{ $brkpnt-key }', comma);
  $hide-selectors: append($hide-selectors, '.show--ib-#{ $brkpnt-key }', comma);
}

#{ $hide-selectors } {
  display: none;
}

@each $brkpnt-key, $brkpnt-value in $mq-breakpoints {
  @include mq($from: $brkpnt-key) {
    .show-#{ $brkpnt-key } {
      display: block !important;
    }

    .show--i-#{ $brkpnt-key } {
      display: inline !important;
    }

    .show--ib-#{ $brkpnt-key } {
      display: inline-block !important;
    }

    .hide-#{ $brkpnt-key } {
      display: none !important;
    }
  }
}


//## Accessibility
.show-focus,
.visually-hidden {
  @include invisible;
}


//## Focus
.show-focus {
  &:active,
  &:focus {
    @include invisible-off;
  }
}
